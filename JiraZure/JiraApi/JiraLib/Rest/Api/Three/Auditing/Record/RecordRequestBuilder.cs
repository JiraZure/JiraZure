// <auto-generated/>
using JiraLib.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace JiraLib.Rest.Api.Three.Auditing.Record {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\auditing\record
    /// </summary>
    public class RecordRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="RecordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/auditing/record{?filter*,from*,limit*,offset*,to*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="RecordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/auditing/record{?filter*,from*,limit*,offset*,to*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of audit records. The list can be filtered to include items: *  where each item in `filter` has at least one match in any of these fields:         *  `summary`     *  `category`     *  `eventSource`     *  `objectItem.name` If the object is a user, account ID is available to filter.     *  `objectItem.parentName`     *  `objectItem.typeName`     *  `changedValues.changedFrom`     *  `changedValues.changedTo`     *  `remoteAddress`        For example, if `filter` contains *man ed*, an audit record containing `summary&quot;: &quot;User added to group&quot;` and `&quot;category&quot;: &quot;group management&quot;` is returned. *  created on or after a date and time. *  created or or before a date and time.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </summary>
        /// <returns>A <see cref="AuditRecords"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ErrorCollection">When receiving a 401 status code</exception>
        /// <exception cref="ErrorCollection">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AuditRecords?> GetAsync(Action<RequestConfiguration<RecordRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AuditRecords> GetAsync(Action<RequestConfiguration<RecordRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", ErrorCollection.CreateFromDiscriminatorValue},
                {"403", ErrorCollection.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<AuditRecords>(requestInfo, AuditRecords.CreateFromDiscriminatorValue, errorMapping,cancellationToken: cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of audit records. The list can be filtered to include items: *  where each item in `filter` has at least one match in any of these fields:         *  `summary`     *  `category`     *  `eventSource`     *  `objectItem.name` If the object is a user, account ID is available to filter.     *  `objectItem.parentName`     *  `objectItem.typeName`     *  `changedValues.changedFrom`     *  `changedValues.changedTo`     *  `remoteAddress`        For example, if `filter` contains *man ed*, an audit record containing `summary&quot;: &quot;User added to group&quot;` and `&quot;category&quot;: &quot;group management&quot;` is returned. *  created on or after a date and time. *  created or or before a date and time.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RecordRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RecordRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="RecordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public RecordRequestBuilder WithUrl(string rawUrl)
        {
            return new RecordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of audit records. The list can be filtered to include items: *  where each item in `filter` has at least one match in any of these fields:         *  `summary`     *  `category`     *  `eventSource`     *  `objectItem.name` If the object is a user, account ID is available to filter.     *  `objectItem.parentName`     *  `objectItem.typeName`     *  `changedValues.changedFrom`     *  `changedValues.changedTo`     *  `remoteAddress`        For example, if `filter` contains *man ed*, an audit record containing `summary&quot;: &quot;User added to group&quot;` and `&quot;category&quot;: &quot;group management&quot;` is returned. *  created on or after a date and time. *  created or or before a date and time.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </summary>
        public class RecordRequestBuilderGetQueryParameters 
        {
            /// <summary>The strings to match with audit field content, space separated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            /// <summary>The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("from")]
            public string? From { get; set; }
#nullable restore
#else
            [QueryParameter("from")]
            public string From { get; set; }
#endif
            /// <summary>The maximum number of results to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The number of records to skip before returning the first result.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("to")]
            public string? To { get; set; }
#nullable restore
#else
            [QueryParameter("to")]
            public string To { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class RecordRequestBuilderGetRequestConfiguration : RequestConfiguration<RecordRequestBuilderGetQueryParameters> 
        {
        }
    }
}
