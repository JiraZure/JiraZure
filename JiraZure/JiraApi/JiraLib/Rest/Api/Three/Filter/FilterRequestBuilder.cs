// <auto-generated/>
using JiraLib.Models;
using JiraLib.Rest.Api.Three.Filter.DefaultShareScope;
using JiraLib.Rest.Api.Three.Filter.Favourite;
using JiraLib.Rest.Api.Three.Filter.Item;
using JiraLib.Rest.Api.Three.Filter.My;
using JiraLib.Rest.Api.Three.Filter.Search;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace JiraLib.Rest.Api.Three.Filter {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\filter
    /// </summary>
    public class FilterRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The defaultShareScope property</summary>
        public DefaultShareScopeRequestBuilder DefaultShareScope
        {
            get => new DefaultShareScopeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The favourite property</summary>
        public FavouriteRequestBuilder Favourite
        {
            get => new FavouriteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The my property</summary>
        public MyRequestBuilder My
        {
            get => new MyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search
        {
            get => new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the JiraLib.rest.api.Three.filter.item collection</summary>
        /// <param name="position">The ID of the filter to delete.</param>
        /// <returns>A <see cref="FilterItemRequestBuilder"/></returns>
        public FilterItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new FilterItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the JiraLib.rest.api.Three.filter.item collection</summary>
        /// <param name="position">The ID of the filter to delete.</param>
        /// <returns>A <see cref="FilterItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public FilterItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
                return new FilterItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/filter{?expand*,overrideSharePermissions*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/filter{?expand*,overrideSharePermissions*}", rawUrl)
        {
        }
        /// <summary>
        /// Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.**[Permissions](#permissions) required:** Permission to access Jira.
        /// </summary>
        /// <returns>A <see cref="JiraLib.Models.Filter"/></returns>
        /// <param name="body">Details about a filter.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<JiraLib.Models.Filter?> PostAsync(JiraLib.Models.Filter body, Action<RequestConfiguration<FilterRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<JiraLib.Models.Filter> PostAsync(JiraLib.Models.Filter body, Action<RequestConfiguration<FilterRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<JiraLib.Models.Filter>(requestInfo, JiraLib.Models.Filter.CreateFromDiscriminatorValue, default,cancellationToken: cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.**[Permissions](#permissions) required:** Permission to access Jira.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Details about a filter.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(JiraLib.Models.Filter body, Action<RequestConfiguration<FilterRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(JiraLib.Models.Filter body, Action<RequestConfiguration<FilterRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="FilterRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public FilterRequestBuilder WithUrl(string rawUrl)
        {
            return new FilterRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.**[Permissions](#permissions) required:** Permission to access Jira.
        /// </summary>
        public class FilterRequestBuilderPostQueryParameters 
        {
            /// <summary>Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include: *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&apos;t specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn&apos;t list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`. *  `subscriptions` Returns the users that are subscribed to the filter. If you don&apos;t specify `subscriptions`, the `subscriptions` object is returned but it doesn&apos;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand")]
            public string? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("expand")]
            public string Expand { get; set; }
#endif
            /// <summary>EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</summary>
            [QueryParameter("overrideSharePermissions")]
            public bool? OverrideSharePermissions { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class FilterRequestBuilderPostRequestConfiguration : RequestConfiguration<FilterRequestBuilderPostQueryParameters> 
        {
        }
    }
}
