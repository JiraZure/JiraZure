// <auto-generated/>
using JiraLib.Rest.Api.Three.AnnouncementBanner;
using JiraLib.Rest.Api.Three.App;
using JiraLib.Rest.Api.Three.ApplicationProperties;
using JiraLib.Rest.Api.Three.Applicationrole;
using JiraLib.Rest.Api.Three.Attachment;
using JiraLib.Rest.Api.Three.Auditing;
using JiraLib.Rest.Api.Three.Avatar;
using JiraLib.Rest.Api.Three.ClassificationLevels;
using JiraLib.Rest.Api.Three.Comment;
using JiraLib.Rest.Api.Three.Component;
using JiraLib.Rest.Api.Three.Configuration;
using JiraLib.Rest.Api.Three.CustomFieldOption;
using JiraLib.Rest.Api.Three.Dashboard;
using JiraLib.Rest.Api.Three.DataPolicy;
using JiraLib.Rest.Api.Three.Events;
using JiraLib.Rest.Api.Three.Expression;
using JiraLib.Rest.Api.Three.Field;
using JiraLib.Rest.Api.Three.Fieldconfiguration;
using JiraLib.Rest.Api.Three.Fieldconfigurationscheme;
using JiraLib.Rest.Api.Three.Filter;
using JiraLib.Rest.Api.Three.Group;
using JiraLib.Rest.Api.Three.Groups;
using JiraLib.Rest.Api.Three.Groupuserpicker;
using JiraLib.Rest.Api.Three.Instance;
using JiraLib.Rest.Api.Three.Issue;
using JiraLib.Rest.Api.Three.IssueLink;
using JiraLib.Rest.Api.Three.IssueLinkType;
using JiraLib.Rest.Api.Three.Issues;
using JiraLib.Rest.Api.Three.Issuesecurityschemes;
using JiraLib.Rest.Api.Three.Issuetype;
using JiraLib.Rest.Api.Three.Issuetypescheme;
using JiraLib.Rest.Api.Three.Issuetypescreenscheme;
using JiraLib.Rest.Api.Three.Jql;
using JiraLib.Rest.Api.Three.Label;
using JiraLib.Rest.Api.Three.License;
using JiraLib.Rest.Api.Three.Mypermissions;
using JiraLib.Rest.Api.Three.Mypreferences;
using JiraLib.Rest.Api.Three.Myself;
using JiraLib.Rest.Api.Three.Notificationscheme;
using JiraLib.Rest.Api.Three.Permissions;
using JiraLib.Rest.Api.Three.Permissionscheme;
using JiraLib.Rest.Api.Three.Priority;
using JiraLib.Rest.Api.Three.Priorityscheme;
using JiraLib.Rest.Api.Three.Project;
using JiraLib.Rest.Api.Three.ProjectCategory;
using JiraLib.Rest.Api.Three.Projectvalidate;
using JiraLib.Rest.Api.Three.Resolution;
using JiraLib.Rest.Api.Three.Role;
using JiraLib.Rest.Api.Three.Screens;
using JiraLib.Rest.Api.Three.Screenscheme;
using JiraLib.Rest.Api.Three.Search;
using JiraLib.Rest.Api.Three.Securitylevel;
using JiraLib.Rest.Api.Three.ServerInfo;
using JiraLib.Rest.Api.Three.Settings;
using JiraLib.Rest.Api.Three.Status;
using JiraLib.Rest.Api.Three.Statuscategory;
using JiraLib.Rest.Api.Three.Statuses;
using JiraLib.Rest.Api.Three.TaskNamespace;
using JiraLib.Rest.Api.Three.UiModifications;
using JiraLib.Rest.Api.Three.Universal_avatar;
using JiraLib.Rest.Api.Three.User;
using JiraLib.Rest.Api.Three.Users;
using JiraLib.Rest.Api.Three.VersionNamespace;
using JiraLib.Rest.Api.Three.Webhook;
using JiraLib.Rest.Api.Three.Workflow;
using JiraLib.Rest.Api.Three.Workflows;
using JiraLib.Rest.Api.Three.Workflowscheme;
using JiraLib.Rest.Api.Three.Worklog;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace JiraLib.Rest.Api.Three {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3
    /// </summary>
    public class ThreeRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The announcementBanner property</summary>
        public AnnouncementBannerRequestBuilder AnnouncementBanner
        {
            get => new AnnouncementBannerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The app property</summary>
        public AppRequestBuilder App
        {
            get => new AppRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The applicationProperties property</summary>
        public ApplicationPropertiesRequestBuilder ApplicationProperties
        {
            get => new ApplicationPropertiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The applicationrole property</summary>
        public ApplicationroleRequestBuilder Applicationrole
        {
            get => new ApplicationroleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The attachment property</summary>
        public AttachmentRequestBuilder Attachment
        {
            get => new AttachmentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The auditing property</summary>
        public AuditingRequestBuilder Auditing
        {
            get => new AuditingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The avatar property</summary>
        public AvatarRequestBuilder Avatar
        {
            get => new AvatarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The classificationLevels property</summary>
        public ClassificationLevelsRequestBuilder ClassificationLevels
        {
            get => new ClassificationLevelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The comment property</summary>
        public CommentRequestBuilder Comment
        {
            get => new CommentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The component property</summary>
        public ComponentRequestBuilder Component
        {
            get => new ComponentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The configuration property</summary>
        public ConfigurationRequestBuilder Configuration
        {
            get => new ConfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customFieldOption property</summary>
        public CustomFieldOptionRequestBuilder CustomFieldOption
        {
            get => new CustomFieldOptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dashboard property</summary>
        public DashboardRequestBuilder Dashboard
        {
            get => new DashboardRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dataPolicy property</summary>
        public DataPolicyRequestBuilder DataPolicy
        {
            get => new DataPolicyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public EventsRequestBuilder Events
        {
            get => new EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expression property</summary>
        public ExpressionRequestBuilder Expression
        {
            get => new ExpressionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The field property</summary>
        public FieldRequestBuilder Field
        {
            get => new FieldRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fieldconfiguration property</summary>
        public FieldconfigurationRequestBuilder Fieldconfiguration
        {
            get => new FieldconfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fieldconfigurationscheme property</summary>
        public FieldconfigurationschemeRequestBuilder Fieldconfigurationscheme
        {
            get => new FieldconfigurationschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filter property</summary>
        public FilterRequestBuilder Filter
        {
            get => new FilterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The group property</summary>
        public GroupRequestBuilder Group
        {
            get => new GroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The groups property</summary>
        public GroupsRequestBuilder Groups
        {
            get => new GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The groupuserpicker property</summary>
        public GroupuserpickerRequestBuilder Groupuserpicker
        {
            get => new GroupuserpickerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The instance property</summary>
        public InstanceRequestBuilder Instance
        {
            get => new InstanceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issue property</summary>
        public IssueRequestBuilder Issue
        {
            get => new IssueRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issueLink property</summary>
        public IssueLinkRequestBuilder IssueLink
        {
            get => new IssueLinkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issueLinkType property</summary>
        public IssueLinkTypeRequestBuilder IssueLinkType
        {
            get => new IssueLinkTypeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issues property</summary>
        public IssuesRequestBuilder Issues
        {
            get => new IssuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issuesecurityschemes property</summary>
        public IssuesecurityschemesRequestBuilder Issuesecurityschemes
        {
            get => new IssuesecurityschemesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issuetype property</summary>
        public IssuetypeRequestBuilder Issuetype
        {
            get => new IssuetypeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issuetypescheme property</summary>
        public IssuetypeschemeRequestBuilder Issuetypescheme
        {
            get => new IssuetypeschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issuetypescreenscheme property</summary>
        public IssuetypescreenschemeRequestBuilder Issuetypescreenscheme
        {
            get => new IssuetypescreenschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jql property</summary>
        public JqlRequestBuilder Jql
        {
            get => new JqlRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The label property</summary>
        public LabelRequestBuilder Label
        {
            get => new LabelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The license property</summary>
        public LicenseRequestBuilder License
        {
            get => new LicenseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mypermissions property</summary>
        public MypermissionsRequestBuilder Mypermissions
        {
            get => new MypermissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mypreferences property</summary>
        public MypreferencesRequestBuilder Mypreferences
        {
            get => new MypreferencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The myself property</summary>
        public MyselfRequestBuilder Myself
        {
            get => new MyselfRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notificationscheme property</summary>
        public NotificationschemeRequestBuilder Notificationscheme
        {
            get => new NotificationschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The permissions property</summary>
        public PermissionsRequestBuilder Permissions
        {
            get => new PermissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The permissionscheme property</summary>
        public PermissionschemeRequestBuilder Permissionscheme
        {
            get => new PermissionschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The priority property</summary>
        public PriorityRequestBuilder Priority
        {
            get => new PriorityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The priorityscheme property</summary>
        public PriorityschemeRequestBuilder Priorityscheme
        {
            get => new PriorityschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The project property</summary>
        public ProjectRequestBuilder Project
        {
            get => new ProjectRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projectCategory property</summary>
        public ProjectCategoryRequestBuilder ProjectCategory
        {
            get => new ProjectCategoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projectvalidate property</summary>
        public ProjectvalidateRequestBuilder Projectvalidate
        {
            get => new ProjectvalidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resolution property</summary>
        public ResolutionRequestBuilder Resolution
        {
            get => new ResolutionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The role property</summary>
        public RoleRequestBuilder Role
        {
            get => new RoleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The screens property</summary>
        public ScreensRequestBuilder Screens
        {
            get => new ScreensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The screenscheme property</summary>
        public ScreenschemeRequestBuilder Screenscheme
        {
            get => new ScreenschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search
        {
            get => new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The securitylevel property</summary>
        public SecuritylevelRequestBuilder Securitylevel
        {
            get => new SecuritylevelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The serverInfo property</summary>
        public ServerInfoRequestBuilder ServerInfo
        {
            get => new ServerInfoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public SettingsRequestBuilder Settings
        {
            get => new SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public StatusRequestBuilder Status
        {
            get => new StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statuscategory property</summary>
        public StatuscategoryRequestBuilder Statuscategory
        {
            get => new StatuscategoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statuses property</summary>
        public StatusesRequestBuilder Statuses
        {
            get => new StatusesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The task property</summary>
        public TaskRequestBuilder Task
        {
            get => new TaskRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The uiModifications property</summary>
        public UiModificationsRequestBuilder UiModifications
        {
            get => new UiModificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The universal_avatar property</summary>
        public Universal_avatarRequestBuilder Universal_avatar
        {
            get => new Universal_avatarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public UserRequestBuilder User
        {
            get => new UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users
        {
            get => new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The version property</summary>
        public VersionRequestBuilder Version
        {
            get => new VersionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhook property</summary>
        public WebhookRequestBuilder Webhook
        {
            get => new WebhookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflow property</summary>
        public WorkflowRequestBuilder Workflow
        {
            get => new WorkflowRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflows property</summary>
        public WorkflowsRequestBuilder Workflows
        {
            get => new WorkflowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowscheme property</summary>
        public WorkflowschemeRequestBuilder Workflowscheme
        {
            get => new WorkflowschemeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The worklog property</summary>
        public WorklogRequestBuilder Worklog
        {
            get => new WorklogRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="ThreeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ThreeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="ThreeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ThreeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3", rawUrl)
        {
        }
    }
}
