// <auto-generated/>
using JiraLib.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace JiraLib.Rest.Api.Three.Jql.Autocompletedata.Suggestions {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\jql\autocompletedata\suggestions
    /// </summary>
    public class SuggestionsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="SuggestionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SuggestionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/jql/autocompletedata/suggestions{?fieldName*,fieldValue*,predicateName*,predicateValue*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="SuggestionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SuggestionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/jql/autocompletedata/suggestions{?fieldName*,fieldValue*,predicateName*,predicateValue*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the JQL search auto complete suggestions for a field.Suggestions can be obtained by providing: *  `fieldName` to get a list of all values for the field. *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`. *  `fieldName` and `predicateName` to get a list of all predicate values for the field. *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.This operation can be accessed anonymously.**[Permissions](#permissions) required:** None.
        /// </summary>
        /// <returns>A <see cref="AutoCompleteSuggestions"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AutoCompleteSuggestions?> GetAsync(Action<RequestConfiguration<SuggestionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AutoCompleteSuggestions> GetAsync(Action<RequestConfiguration<SuggestionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<AutoCompleteSuggestions>(requestInfo, AutoCompleteSuggestions.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the JQL search auto complete suggestions for a field.Suggestions can be obtained by providing: *  `fieldName` to get a list of all values for the field. *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`. *  `fieldName` and `predicateName` to get a list of all predicate values for the field. *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.This operation can be accessed anonymously.**[Permissions](#permissions) required:** None.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<SuggestionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<SuggestionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="SuggestionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public SuggestionsRequestBuilder WithUrl(string rawUrl)
        {
            return new SuggestionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the JQL search auto complete suggestions for a field.Suggestions can be obtained by providing: *  `fieldName` to get a list of all values for the field. *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`. *  `fieldName` and `predicateName` to get a list of all predicate values for the field. *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.This operation can be accessed anonymously.**[Permissions](#permissions) required:** None.
        /// </summary>
        public class SuggestionsRequestBuilderGetQueryParameters 
        {
            /// <summary>The name of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fieldName")]
            public string? FieldName { get; set; }
#nullable restore
#else
            [QueryParameter("fieldName")]
            public string FieldName { get; set; }
#endif
            /// <summary>The partial field item name entered by the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fieldValue")]
            public string? FieldValue { get; set; }
#nullable restore
#else
            [QueryParameter("fieldValue")]
            public string FieldValue { get; set; }
#endif
            /// <summary>The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("predicateName")]
            public string? PredicateName { get; set; }
#nullable restore
#else
            [QueryParameter("predicateName")]
            public string PredicateName { get; set; }
#endif
            /// <summary>The partial predicate item name entered by the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("predicateValue")]
            public string? PredicateValue { get; set; }
#nullable restore
#else
            [QueryParameter("predicateValue")]
            public string PredicateValue { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class SuggestionsRequestBuilderGetRequestConfiguration : RequestConfiguration<SuggestionsRequestBuilderGetQueryParameters> 
        {
        }
    }
}
