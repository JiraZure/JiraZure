// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    #pragma warning disable CS1591
    public class IssueLimitReportRequest : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>A list of fields and their respective approaching limit threshold. Required for querying issues approaching limits. Optional for querying issues breaching limits. Accepted fields are: `comment`, `worklog`, `attachment`, `remoteIssueLinks`, and `issuelinks`. Example: `{&quot;issuesApproachingLimitParams&quot;: {&quot;comment&quot;: 4500, &quot;attachment&quot;: 1800}}`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueLimitReportRequest_issuesApproachingLimitParams? IssuesApproachingLimitParams { get; set; }
#nullable restore
#else
        public IssueLimitReportRequest_issuesApproachingLimitParams IssuesApproachingLimitParams { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="IssueLimitReportRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueLimitReportRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueLimitReportRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"issuesApproachingLimitParams", n => { IssuesApproachingLimitParams = n.GetObjectValue<IssueLimitReportRequest_issuesApproachingLimitParams>(IssueLimitReportRequest_issuesApproachingLimitParams.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<IssueLimitReportRequest_issuesApproachingLimitParams>("issuesApproachingLimitParams", IssuesApproachingLimitParams);
        }
    }
}
