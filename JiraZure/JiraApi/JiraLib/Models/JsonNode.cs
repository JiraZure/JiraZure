// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    #pragma warning disable CS1591
    public class JsonNode : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The array property</summary>
        public bool? Array { get; set; }
        /// <summary>The bigDecimal property</summary>
        public bool? BigDecimal { get; set; }
        /// <summary>The bigInteger property</summary>
        public bool? BigInteger { get; set; }
        /// <summary>The bigIntegerValue property</summary>
        public int? BigIntegerValue { get; set; }
        /// <summary>The binary property</summary>
        public bool? Binary { get; set; }
        /// <summary>The binaryValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BinaryValue { get; set; }
#nullable restore
#else
        public List<string> BinaryValue { get; set; }
#endif
        /// <summary>The boolean property</summary>
        public bool? Boolean { get; set; }
        /// <summary>The booleanValue property</summary>
        public bool? BooleanValue { get; set; }
        /// <summary>The containerNode property</summary>
        public bool? ContainerNode { get; set; }
        /// <summary>The decimalValue property</summary>
        public double? DecimalValue { get; set; }
        /// <summary>The double property</summary>
        public bool? Double { get; set; }
        /// <summary>The doubleValue property</summary>
        public double? DoubleValue { get; set; }
        /// <summary>The elements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JsonNode_elements? Elements { get; set; }
#nullable restore
#else
        public JsonNode_elements Elements { get; set; }
#endif
        /// <summary>The fieldNames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JsonNode_fieldNames? FieldNames { get; set; }
#nullable restore
#else
        public JsonNode_fieldNames FieldNames { get; set; }
#endif
        /// <summary>The fields property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JsonNode_fields? Fields { get; set; }
#nullable restore
#else
        public JsonNode_fields Fields { get; set; }
#endif
        /// <summary>The floatingPointNumber property</summary>
        public bool? FloatingPointNumber { get; set; }
        /// <summary>The int property</summary>
        public bool? Int { get; set; }
        /// <summary>The integralNumber property</summary>
        public bool? IntegralNumber { get; set; }
        /// <summary>The intValue property</summary>
        public int? IntValue { get; set; }
        /// <summary>The long property</summary>
        public bool? Long { get; set; }
        /// <summary>The longValue property</summary>
        public long? LongValue { get; set; }
        /// <summary>The missingNode property</summary>
        public bool? MissingNode { get; set; }
        /// <summary>The null property</summary>
        public bool? Null { get; set; }
        /// <summary>The number property</summary>
        public bool? Number { get; set; }
        /// <summary>The numberType property</summary>
        public JsonNode_numberType? NumberType { get; set; }
        /// <summary>The numberValue property</summary>
        public double? NumberValue { get; set; }
        /// <summary>The object property</summary>
        public bool? Object { get; set; }
        /// <summary>The pojo property</summary>
        public bool? Pojo { get; set; }
        /// <summary>The textual property</summary>
        public bool? Textual { get; set; }
        /// <summary>The textValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TextValue { get; set; }
#nullable restore
#else
        public string TextValue { get; set; }
#endif
        /// <summary>The valueAsBoolean property</summary>
        public bool? ValueAsBoolean { get; set; }
        /// <summary>The valueAsDouble property</summary>
        public double? ValueAsDouble { get; set; }
        /// <summary>The valueAsInt property</summary>
        public int? ValueAsInt { get; set; }
        /// <summary>The valueAsLong property</summary>
        public long? ValueAsLong { get; set; }
        /// <summary>The valueAsText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValueAsText { get; set; }
#nullable restore
#else
        public string ValueAsText { get; set; }
#endif
        /// <summary>The valueNode property</summary>
        public bool? ValueNode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="JsonNode"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JsonNode CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JsonNode();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"array", n => { Array = n.GetBoolValue(); } },
                {"bigDecimal", n => { BigDecimal = n.GetBoolValue(); } },
                {"bigInteger", n => { BigInteger = n.GetBoolValue(); } },
                {"bigIntegerValue", n => { BigIntegerValue = n.GetIntValue(); } },
                {"binary", n => { Binary = n.GetBoolValue(); } },
                {"binaryValue", n => { BinaryValue = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"boolean", n => { Boolean = n.GetBoolValue(); } },
                {"booleanValue", n => { BooleanValue = n.GetBoolValue(); } },
                {"containerNode", n => { ContainerNode = n.GetBoolValue(); } },
                {"decimalValue", n => { DecimalValue = n.GetDoubleValue(); } },
                {"double", n => { Double = n.GetBoolValue(); } },
                {"doubleValue", n => { DoubleValue = n.GetDoubleValue(); } },
                {"elements", n => { Elements = n.GetObjectValue<JsonNode_elements>(JsonNode_elements.CreateFromDiscriminatorValue); } },
                {"fieldNames", n => { FieldNames = n.GetObjectValue<JsonNode_fieldNames>(JsonNode_fieldNames.CreateFromDiscriminatorValue); } },
                {"fields", n => { Fields = n.GetObjectValue<JsonNode_fields>(JsonNode_fields.CreateFromDiscriminatorValue); } },
                {"floatingPointNumber", n => { FloatingPointNumber = n.GetBoolValue(); } },
                {"int", n => { Int = n.GetBoolValue(); } },
                {"intValue", n => { IntValue = n.GetIntValue(); } },
                {"integralNumber", n => { IntegralNumber = n.GetBoolValue(); } },
                {"long", n => { Long = n.GetBoolValue(); } },
                {"longValue", n => { LongValue = n.GetLongValue(); } },
                {"missingNode", n => { MissingNode = n.GetBoolValue(); } },
                {"null", n => { Null = n.GetBoolValue(); } },
                {"number", n => { Number = n.GetBoolValue(); } },
                {"numberType", n => { NumberType = n.GetEnumValue<JsonNode_numberType>(); } },
                {"numberValue", n => { NumberValue = n.GetDoubleValue(); } },
                {"object", n => { Object = n.GetBoolValue(); } },
                {"pojo", n => { Pojo = n.GetBoolValue(); } },
                {"textValue", n => { TextValue = n.GetStringValue(); } },
                {"textual", n => { Textual = n.GetBoolValue(); } },
                {"valueAsBoolean", n => { ValueAsBoolean = n.GetBoolValue(); } },
                {"valueAsDouble", n => { ValueAsDouble = n.GetDoubleValue(); } },
                {"valueAsInt", n => { ValueAsInt = n.GetIntValue(); } },
                {"valueAsLong", n => { ValueAsLong = n.GetLongValue(); } },
                {"valueAsText", n => { ValueAsText = n.GetStringValue(); } },
                {"valueNode", n => { ValueNode = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("array", Array);
            writer.WriteBoolValue("bigDecimal", BigDecimal);
            writer.WriteBoolValue("bigInteger", BigInteger);
            writer.WriteIntValue("bigIntegerValue", BigIntegerValue);
            writer.WriteBoolValue("binary", Binary);
            writer.WriteCollectionOfPrimitiveValues<string>("binaryValue", BinaryValue);
            writer.WriteBoolValue("boolean", Boolean);
            writer.WriteBoolValue("booleanValue", BooleanValue);
            writer.WriteBoolValue("containerNode", ContainerNode);
            writer.WriteDoubleValue("decimalValue", DecimalValue);
            writer.WriteBoolValue("double", Double);
            writer.WriteDoubleValue("doubleValue", DoubleValue);
            writer.WriteObjectValue<JsonNode_elements>("elements", Elements);
            writer.WriteObjectValue<JsonNode_fieldNames>("fieldNames", FieldNames);
            writer.WriteObjectValue<JsonNode_fields>("fields", Fields);
            writer.WriteBoolValue("floatingPointNumber", FloatingPointNumber);
            writer.WriteBoolValue("int", Int);
            writer.WriteBoolValue("integralNumber", IntegralNumber);
            writer.WriteIntValue("intValue", IntValue);
            writer.WriteBoolValue("long", Long);
            writer.WriteLongValue("longValue", LongValue);
            writer.WriteBoolValue("missingNode", MissingNode);
            writer.WriteBoolValue("null", Null);
            writer.WriteBoolValue("number", Number);
            writer.WriteEnumValue<JsonNode_numberType>("numberType", NumberType);
            writer.WriteDoubleValue("numberValue", NumberValue);
            writer.WriteBoolValue("object", Object);
            writer.WriteBoolValue("pojo", Pojo);
            writer.WriteBoolValue("textual", Textual);
            writer.WriteStringValue("textValue", TextValue);
            writer.WriteBoolValue("valueAsBoolean", ValueAsBoolean);
            writer.WriteDoubleValue("valueAsDouble", ValueAsDouble);
            writer.WriteIntValue("valueAsInt", ValueAsInt);
            writer.WriteLongValue("valueAsLong", ValueAsLong);
            writer.WriteStringValue("valueAsText", ValueAsText);
            writer.WriteBoolValue("valueNode", ValueNode);
        }
    }
}
