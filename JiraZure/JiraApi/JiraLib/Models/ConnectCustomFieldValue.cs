// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    /// <summary>
    /// A list of custom field details.
    /// </summary>
    public class ConnectCustomFieldValue : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The custom field ID.</summary>
        public int? FieldID { get; set; }
        /// <summary>The issue ID.</summary>
        public int? IssueID { get; set; }
        /// <summary>The value of number type custom field when `_type` is `NumberIssueField`.</summary>
        public double? Number { get; set; }
        /// <summary>The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OptionID { get; set; }
#nullable restore
#else
        public string OptionID { get; set; }
#endif
        /// <summary>The value of richText type custom field when `_type` is `RichTextIssueField`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RichText { get; set; }
#nullable restore
#else
        public string RichText { get; set; }
#endif
        /// <summary>The value of string type custom field when `_type` is `StringIssueField`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? String { get; set; }
#nullable restore
#else
        public string String { get; set; }
#endif
        /// <summary>The value of of text custom field type when `_type` is `TextIssueField`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The type of custom field.</summary>
        public ConnectCustomFieldValue__type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ConnectCustomFieldValue"/> and sets the default values.
        /// </summary>
        public ConnectCustomFieldValue()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ConnectCustomFieldValue"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ConnectCustomFieldValue CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConnectCustomFieldValue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"fieldID", n => { FieldID = n.GetIntValue(); } },
                {"issueID", n => { IssueID = n.GetIntValue(); } },
                {"number", n => { Number = n.GetDoubleValue(); } },
                {"optionID", n => { OptionID = n.GetStringValue(); } },
                {"richText", n => { RichText = n.GetStringValue(); } },
                {"string", n => { String = n.GetStringValue(); } },
                {"text", n => { Text = n.GetStringValue(); } },
                {"_type", n => { Type = n.GetEnumValue<ConnectCustomFieldValue__type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("fieldID", FieldID);
            writer.WriteIntValue("issueID", IssueID);
            writer.WriteDoubleValue("number", Number);
            writer.WriteStringValue("optionID", OptionID);
            writer.WriteStringValue("richText", RichText);
            writer.WriteStringValue("string", String);
            writer.WriteStringValue("text", Text);
            writer.WriteEnumValue<ConnectCustomFieldValue__type>("_type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
