// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    #pragma warning disable CS1591
    public class LinkIssueRequestJsonBean : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>A comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraLib.Models.Comment? Comment { get; set; }
#nullable restore
#else
        public JiraLib.Models.Comment Comment { get; set; }
#endif
        /// <summary>The ID or key of a linked issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LinkedIssue? InwardIssue { get; set; }
#nullable restore
#else
        public LinkedIssue InwardIssue { get; set; }
#endif
        /// <summary>The ID or key of a linked issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LinkedIssue? OutwardIssue { get; set; }
#nullable restore
#else
        public LinkedIssue OutwardIssue { get; set; }
#endif
        /// <summary>This object is used as follows: *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get). *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueLinkType? Type { get; set; }
#nullable restore
#else
        public IssueLinkType Type { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LinkIssueRequestJsonBean"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LinkIssueRequestJsonBean CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LinkIssueRequestJsonBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"comment", n => { Comment = n.GetObjectValue<JiraLib.Models.Comment>(JiraLib.Models.Comment.CreateFromDiscriminatorValue); } },
                {"inwardIssue", n => { InwardIssue = n.GetObjectValue<LinkedIssue>(LinkedIssue.CreateFromDiscriminatorValue); } },
                {"outwardIssue", n => { OutwardIssue = n.GetObjectValue<LinkedIssue>(LinkedIssue.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetObjectValue<IssueLinkType>(IssueLinkType.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JiraLib.Models.Comment>("comment", Comment);
            writer.WriteObjectValue<LinkedIssue>("inwardIssue", InwardIssue);
            writer.WriteObjectValue<LinkedIssue>("outwardIssue", OutwardIssue);
            writer.WriteObjectValue<IssueLinkType>("type", Type);
        }
    }
}
