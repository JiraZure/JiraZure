// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    /// <summary>
    /// Composed type wrapper for classes <see cref="WorkflowCompoundCondition"/>, <see cref="WorkflowSimpleCondition"/>
    /// </summary>
    public class WorkflowCondition : IComposedTypeWrapper, IParsable 
    {
        /// <summary>Composed type representation for type <see cref="JiraLib.Models.WorkflowCompoundCondition"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraLib.Models.WorkflowCompoundCondition? WorkflowCompoundCondition { get; set; }
#nullable restore
#else
        public JiraLib.Models.WorkflowCompoundCondition WorkflowCompoundCondition { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="JiraLib.Models.WorkflowCompoundCondition"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraLib.Models.WorkflowCompoundCondition? WorkflowConditionWorkflowCompoundCondition { get; set; }
#nullable restore
#else
        public JiraLib.Models.WorkflowCompoundCondition WorkflowConditionWorkflowCompoundCondition { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="JiraLib.Models.WorkflowSimpleCondition"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraLib.Models.WorkflowSimpleCondition? WorkflowConditionWorkflowSimpleCondition { get; set; }
#nullable restore
#else
        public JiraLib.Models.WorkflowSimpleCondition WorkflowConditionWorkflowSimpleCondition { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="JiraLib.Models.WorkflowSimpleCondition"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraLib.Models.WorkflowSimpleCondition? WorkflowSimpleCondition { get; set; }
#nullable restore
#else
        public JiraLib.Models.WorkflowSimpleCondition WorkflowSimpleCondition { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WorkflowCondition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowCondition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("nodeType")?.GetStringValue();
            var result = new WorkflowCondition();
            if("compound".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WorkflowCompoundCondition = new JiraLib.Models.WorkflowCompoundCondition();
            }
            else if("compound".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WorkflowConditionWorkflowCompoundCondition = new JiraLib.Models.WorkflowCompoundCondition();
            }
            else if("simple".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WorkflowConditionWorkflowSimpleCondition = new JiraLib.Models.WorkflowSimpleCondition();
            }
            else if("simple".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WorkflowSimpleCondition = new JiraLib.Models.WorkflowSimpleCondition();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(WorkflowCompoundCondition != null)
            {
                return WorkflowCompoundCondition.GetFieldDeserializers();
            }
            else if(WorkflowConditionWorkflowCompoundCondition != null)
            {
                return WorkflowConditionWorkflowCompoundCondition.GetFieldDeserializers();
            }
            else if(WorkflowConditionWorkflowSimpleCondition != null)
            {
                return WorkflowConditionWorkflowSimpleCondition.GetFieldDeserializers();
            }
            else if(WorkflowSimpleCondition != null)
            {
                return WorkflowSimpleCondition.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(WorkflowCompoundCondition != null)
            {
                writer.WriteObjectValue<JiraLib.Models.WorkflowCompoundCondition>(null, WorkflowCompoundCondition);
            }
            else if(WorkflowConditionWorkflowCompoundCondition != null)
            {
                writer.WriteObjectValue<JiraLib.Models.WorkflowCompoundCondition>(null, WorkflowConditionWorkflowCompoundCondition);
            }
            else if(WorkflowConditionWorkflowSimpleCondition != null)
            {
                writer.WriteObjectValue<JiraLib.Models.WorkflowSimpleCondition>(null, WorkflowConditionWorkflowSimpleCondition);
            }
            else if(WorkflowSimpleCondition != null)
            {
                writer.WriteObjectValue<JiraLib.Models.WorkflowSimpleCondition>(null, WorkflowSimpleCondition);
            }
        }
    }
}
