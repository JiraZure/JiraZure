// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
    /// </summary>
    public class JexpJqlIssues : IParsable 
    {
        /// <summary>The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.</summary>
        public int? MaxResults { get; set; }
        /// <summary>The JQL query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Query { get; set; }
#nullable restore
#else
        public string Query { get; set; }
#endif
        /// <summary>The index of the first issue to return from the JQL query.</summary>
        public long? StartAt { get; set; }
        /// <summary>Determines how to validate the JQL query and treat the validation results.</summary>
        public JexpJqlIssues_validation? Validation { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="JexpJqlIssues"/> and sets the default values.
        /// </summary>
        public JexpJqlIssues()
        {
            Validation = JexpJqlIssues_validation.Strict;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="JexpJqlIssues"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JexpJqlIssues CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JexpJqlIssues();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"query", n => { Query = n.GetStringValue(); } },
                {"startAt", n => { StartAt = n.GetLongValue(); } },
                {"validation", n => { Validation = n.GetEnumValue<JexpJqlIssues_validation>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("maxResults", MaxResults);
            writer.WriteStringValue("query", Query);
            writer.WriteLongValue("startAt", StartAt);
            writer.WriteEnumValue<JexpJqlIssues_validation>("validation", Validation);
        }
    }
}
