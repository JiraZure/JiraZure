// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    /// <summary>
    /// The update workflow scheme payload.
    /// </summary>
    public class WorkflowSchemeUpdateRequest : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn&apos;t specified, this is set to *Jira Workflow (jira)*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultWorkflowId { get; set; }
#nullable restore
#else
        public string DefaultWorkflowId { get; set; }
#endif
        /// <summary>The new description for this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The new name for this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn&apos;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MappingsByIssueTypeOverride>? StatusMappingsByIssueTypeOverride { get; set; }
#nullable restore
#else
        public List<MappingsByIssueTypeOverride> StatusMappingsByIssueTypeOverride { get; set; }
#endif
        /// <summary>The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&apos;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MappingsByWorkflow>? StatusMappingsByWorkflows { get; set; }
#nullable restore
#else
        public List<MappingsByWorkflow> StatusMappingsByWorkflows { get; set; }
#endif
        /// <summary>The current version details of this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DocumentVersion? Version { get; set; }
#nullable restore
#else
        public DocumentVersion Version { get; set; }
#endif
        /// <summary>Mappings from workflows to issue types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WorkflowSchemeAssociation>? WorkflowsForIssueTypes { get; set; }
#nullable restore
#else
        public List<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="WorkflowSchemeUpdateRequest"/> and sets the default values.
        /// </summary>
        public WorkflowSchemeUpdateRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WorkflowSchemeUpdateRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowSchemeUpdateRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowSchemeUpdateRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"defaultWorkflowId", n => { DefaultWorkflowId = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"statusMappingsByIssueTypeOverride", n => { StatusMappingsByIssueTypeOverride = n.GetCollectionOfObjectValues<MappingsByIssueTypeOverride>(MappingsByIssueTypeOverride.CreateFromDiscriminatorValue)?.ToList(); } },
                {"statusMappingsByWorkflows", n => { StatusMappingsByWorkflows = n.GetCollectionOfObjectValues<MappingsByWorkflow>(MappingsByWorkflow.CreateFromDiscriminatorValue)?.ToList(); } },
                {"version", n => { Version = n.GetObjectValue<DocumentVersion>(DocumentVersion.CreateFromDiscriminatorValue); } },
                {"workflowsForIssueTypes", n => { WorkflowsForIssueTypes = n.GetCollectionOfObjectValues<WorkflowSchemeAssociation>(WorkflowSchemeAssociation.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("defaultWorkflowId", DefaultWorkflowId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<MappingsByIssueTypeOverride>("statusMappingsByIssueTypeOverride", StatusMappingsByIssueTypeOverride);
            writer.WriteCollectionOfObjectValues<MappingsByWorkflow>("statusMappingsByWorkflows", StatusMappingsByWorkflows);
            writer.WriteObjectValue<DocumentVersion>("version", Version);
            writer.WriteCollectionOfObjectValues<WorkflowSchemeAssociation>("workflowsForIssueTypes", WorkflowsForIssueTypes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
