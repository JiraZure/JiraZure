// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    #pragma warning disable CS1591
    public class IdSearchRequestBean : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. Order by clauses are not allowed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jql { get; set; }
#nullable restore
#else
        public string Jql { get; set; }
#endif
        /// <summary>The maximum number of items to return per page.</summary>
        public int? MaxResults { get; set; }
        /// <summary>The continuation token to fetch the next page. This token is provided by the response of this endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextPageToken { get; set; }
#nullable restore
#else
        public string NextPageToken { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="IdSearchRequestBean"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IdSearchRequestBean CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IdSearchRequestBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"jql", n => { Jql = n.GetStringValue(); } },
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"nextPageToken", n => { NextPageToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("jql", Jql);
            writer.WriteIntValue("maxResults", MaxResults);
            writer.WriteStringValue("nextPageToken", NextPageToken);
        }
    }
}
