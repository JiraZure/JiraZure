// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JiraLib.Models {
    /// <summary>
    /// Details of changes to a priority scheme&apos;s priorities that require suggested priority mappings.
    /// </summary>
    public class SuggestedMappingsForPrioritiesRequestBean : IParsable 
    {
        /// <summary>The ids of priorities being removed from the scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Add { get; set; }
#nullable restore
#else
        public List<long?> Add { get; set; }
#endif
        /// <summary>The ids of priorities being removed from the scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Remove { get; set; }
#nullable restore
#else
        public List<long?> Remove { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SuggestedMappingsForPrioritiesRequestBean"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SuggestedMappingsForPrioritiesRequestBean CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SuggestedMappingsForPrioritiesRequestBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"add", n => { Add = n.GetCollectionOfPrimitiveValues<long?>()?.ToList(); } },
                {"remove", n => { Remove = n.GetCollectionOfPrimitiveValues<long?>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<long?>("add", Add);
            writer.WriteCollectionOfPrimitiveValues<long?>("remove", Remove);
        }
    }
}
